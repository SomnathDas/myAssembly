// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Instruction or C Instruction
    Not(in=instruction[15], out=isAInstruction);
    Not(in=isAInstruction, out=isCInstruction);
    
    // ALU
    Or(a=instruction[5], b=isAInstruction, out=loadA);
    ARegister(in=FirstMuxOut, load=loadA, out=outARegister, out[0..14]=addressM);
    Mux16(a=ALUOutput, b=instruction, sel=isAInstruction, out=FirstMuxOut); 
    
    And(a=isCInstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUOutput, load=loadD, out=outDRegister);
    
    And(a=isCInstruction, b=instruction[12], out=selComp);
    Mux16(a=outARegister, b=inM, sel=selComp, out=SecondMuxOut);

    ALU(x=outDRegister, y=SecondMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOutput, out=outM, zr=ZROut, ng=NGOut);
	
    And(a=isCInstruction, b=instruction[3], out=writeM);

    // PC
    And(a=ZROut, b=instruction[1], out=jeq);
    And(a=NGOut, b=instruction[2], out=jlt);
    
    Or(a=ZROut, b=NGOut, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);  
    And(a=positive, b=instruction[0], out=jgt);
    
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);             
    
    And(a=isCInstruction, b=jumpToA, out=PCload);
    
    Not(in=PCload, out=PCinc);
    PC(in=outARegister, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);

}